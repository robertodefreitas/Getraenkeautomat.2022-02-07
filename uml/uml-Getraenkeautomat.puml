@startuml
'https://plantuml.com/class-diagram
'need this into unix systems
!pragma layout smetana
!include uml-style.iuml
'- private
'# protected
'~ package private
'+ public

'MAIN

+class Getraenkeautomat <main> {
  -Kasse kasse
  +void Einkaufen(Fach fach,Muenzen muenzen)
}

'KASSE

+class Muenzen <kasse> {
  -int c10Menge
  -int c20Menge
  -int c50Menge
  -int c100Menge
  -int c200Menge
  +Muenzen()
  +Muenzen(int c10Menge, int ...)
  +int get...()
  +void set...(int ...)
  +setMuenze(int muenze, int anzahl)
  +int umwandelGeldBetrag2Cents(double geldBetrag)
  +Muenzen umwandelnGeldBetrag2Muenzen(double geldBetrag)
  +double umwandelnCents2GeldBetrag(int geldBetragCents)
  +double umwandelnMuenzen2GeldBetrag()
}

+class Kasse <kasse> {
  -Muenzen vorhandeneMuenzen
  +Kasse()
  +Kasse(Muenzen vorhandeneMuenzen)
  +Muenzen getVorhandeneMuenzen()
  +void setVorhandeneMuenzen(Muenzen vorhandeneMuenzen)
  +void muenzenHinzufuegen(Muenzen muenzen)
  +void muenzuenAbziehen(Muenzen muenzen)
  +double summeKasseBetrag

}

'LAGER

+class Fach <lager> extends Getraenkelager {
  -int id
  -int menge
  -double preis
  +Fach()
  +Fach(int id, int menge, double preis)
  +int get...()
  +void set...(int ...)
  +boolen istGetraenkeVorhanden()
  +void getraenkeKonsumieren()
  +boolen einzahlungAusreichend(double einzahlung)
}

+class Getraenkelager <lager> {
  -int mengeSumme
  -int mengeFaecher
  +GetraenkeLager()
  +GetraenkeLager(int mengeSumme, Integer mengeFaecher)
  +int get...()
  +void set...(int ...)
}


'Comment
'association offen: -->
Muenzen <-- Getraenkeautomat
Muenzen <-- Kasse
Fach "n" <-- Getraenkeautomat
'besondere beziehung, Komposition
'1: eine Kasse
Kasse "1" <-- Getraenkeautomat:besitzt

@enduml