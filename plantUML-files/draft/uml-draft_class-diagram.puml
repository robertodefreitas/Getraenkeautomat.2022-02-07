@startuml
'https://plantuml.com/class-diagram
'need this into unix systems
!pragma layout smetana
!include uml-style.iuml
'- private
'# protected
'~ package private
'+ public

'FILES
annotation resources <files> {
  application.properties
  data.sql
  ..templates..
  empty
  ..static..
  empty
}


'MAIN
+class DogRestApiApplication <root> {
  @SpringBootApplication
  --
  {static} void main(String[] args)
}

'CONFIG
+class SpringSecurityConfig <config> extends WebSecurityConfigurerAdapter {
  @Configuration
  @EnableWebSecurity
  --
  @Override
  -void configure(HttpSecurity http) throws Exception

  @Override
  +void configure(WebSecurity web) throws Exception
  
  @Autowired
  +void configureGlobal(AuthenticationManagerBuilder auth)
  
  @Bean
  +PasswordEncoder encoder()
  
}

'ENTITY/MODEL
+class Dog <entity_model> {
  @Entity
  --
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  -Long id
  ..
  -String name
  -String breed
  -String origin
  ..
  +Dog(Long id, String name, String breed, String origin)
  +Dog(String name, String breed)
  +Dog()

  +int getId()
  +void setId(Long id)
  
  +String getName()
  +void setName(String name)

  +String getBreed()
  +void setBreed(String breed)

  +String getOrigin()
  +void setOrigin(String origin)
}


'REPOSITORY/MAPPER
+interface DogRepository <repository_mapper> extends CrudRepository {
  (interface)
  --
  @Query("SELECT ...")
  String findBreedById(Long id);

  @Query("SELECT ...")
  List<String> findAllBreed();

  @Query("SELECT ...")
  List<String> findAllName();
}


'SERVICE
+class DogNotFoundException <service> extends RuntimeException {
  @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Dog not found")
  --
  +DogNotFoundException()
  +DogNotFoundException(String message)
}

+interface DogService <service> {
  (interface)
  --
  List<Dog> retrieveDogs()
  List<String> retrieveDogBreed()
  String retrieveDogBreedById(Long id)
  List<String> retrieveDogNames()
}

+class DogServiceImpl <service> implements DogService {
  @Service
  --
  @Autowired
  DogRepository dogRepository
  ..
  +List<Dog> retrieveDogs()
  +List<String> retrieveDogBreed()
  +String retrieveDogBreedById(Long id)
  +List<String> retrieveDogNames()
}


'WEB/CONTROLLER

+class DogController <web_controller> {
  @RestController
  --
  -DogService dogService
  ..
  @Autowired
  +void setDogService(DogService dogService)
  
  @GetMapping("/dogs")
  +ResponseEntity<List<Dog>> getAllDogs()

  @GetMapping("/dogs/breed")
  +ResponseEntity<List<String>> getDogBreeds()

  @GetMapping("/{id}/breed")
  +ResponseEntity<String> getBreedByID(@PathVariable Long id)

  @GetMapping("/dogs/name")
  +ResponseEntity<List<String>> getDogNames()
}

'Comment
DogController <|-- DogService
DogServiceImpl <|-- Dog
DogServiceImpl <|-- DogRepository

@enduml